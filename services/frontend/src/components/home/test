import { h } from '../../vdom/createElement';
import { ComponentFunction } from "../../types/global";
import { useEffect } from '../../hooks/useEffect';
import { useState } from '../../hooks/useState';
import { useRef } from '../../hooks/useRef';
import { ws } from '../../main'
type Friend = {
  id: number;
  username: string;
  avatar: string;
  online: boolean;
};

interface NotificationPanelProps {
  modalManager: {
    activeModal: 'search' | 'notification' | null;
    openModal: (modal: 'search' | 'notification') => void;
    closeModal: () => void;
    isModalOpen: (modal: 'search' | 'notification') => boolean;
  };
  open: boolean;
}

export const NotificationPanel: ComponentFunction<NotificationPanelProps> = ({ modalManager, open }) => {
  const [pendingFriends, setPendingFriends] = useState<Friend[]>([]);
  const [showAll, setShowAll] = useState(false);

  const fetchPendingFriends = async () => {
    try {
      const response = await fetch(`${import.meta.env.VITE_USER_SERVICE_HOST}:${import.meta.env.VITE_USER_SERVICE_PORT}/api/notifications`, { credentials: 'include' });

      if (!response.ok) {
        throw new Error('Failed to fetch pending friends');
      }

      const data = await response.json();

      const friendsArray: Friend[] = Array.isArray(data)
        ? data.map((f: any) => ({ ...f, status: 'pending' }))
        : [];

      setPendingFriends(friendsArray);
    } catch (err) {
      console.error('Error fetching pending friends:', err);
      setPendingFriends([]);
    }
  };

  useEffect(() => {
    if (open) {
      fetchPendingFriends();
    }
  }, [open]);

  const handleFriendAction = async (username: string, action: 'accept' | 'decline') => {
    try {
      const response = await fetch('/api/friends/actions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ username, action: action === 'decline' ? 'cancel' : action })
      });

      if (!response.ok) throw new Error(`Failed to ${action} friend request`);

      await fetchPendingFriends();
    } catch (err) {
      console.error(`Error performing ${action} action:`, err);
    }
  };

  const renderActionButton = (friend: Friend) => {
    return (
      <div className="flex gap-2">
        <button
          onClick={(e: MouseEvent) => {
            e.preventDefault();
            e.stopPropagation();
            handleFriendAction(friend.username, 'accept');
          }}
          className="flex items-center gap-2 px-4 h-[30px] bg-[url('/images/setting-assests/bg-accept.svg')] bg-no-repeat bg-center bg-contain text-white font-semibold text-sm transition-transform duration-200 hover:scale-95"
        >
          <i className="fa-solid fa-check text-sm"></i>
          <span>Accept</span>
        </button>
        <button
          onClick={(e: MouseEvent) => {
            e.preventDefault();
            e.stopPropagation();
            handleFriendAction(friend.username, 'decline');
          }}
          className="flex items-center gap-2 px-4 h-[30px] bg-[url('/images/setting-assests/bg-decline.svg')] bg-no-repeat bg-center bg-contain text-white font-semibold text-sm transition-transform duration-200 hover:scale-95"
        >
          <i className="fa-solid fa-xmark text-sm"></i>
          <span>Decline</span>
        </button>
      </div>
    );
  };

  const displayUsers = showAll
    ? (Array.isArray(pendingFriends) ? pendingFriends : [])
    : (Array.isArray(pendingFriends) ? pendingFriends.slice(0, 4) : []);

  return (
    <div
      className={`absolute top-[58px] -right-40 mt-2 w-96 h-96 bg-[#5D9FA9] opacity-95 rounded-lg shadow-xl flex flex-col z-[9999] ${open ? '' : 'hidden'}`}
      onClick={(e: MouseEvent) => e.stopPropagation()}
    >
      <div className="p-4 border-b border-[#4E92A2] bg-[#5D9FA9] text-white rounded-t-lg">
        <div className="flex items-center justify-between">
          <h3 className="font-semibold">Your Notifications</h3>
          <button className="text-sm hover:underline">âœ“ Mark all as read</button>
        </div>
      </div>

      <div className="flex-1 overflow-y-auto">
        <ul className="space-y-3 p-3">
          {displayUsers.map(user => (
            <li
              key={user.id}
              className="flex items-center justify-between gap-3 pb-1 border-b border-[#91C7D6]"
            >
              <div className="flex items-center gap-3">
                <img
                  src={user.avatar}
                  className="w-14 h-14 rounded-full object-cover border-4 border-white/20"
                  alt="Avatar"
                />
                <span className="font-irish text-white">{user.username}</span>
              </div>
              {renderActionButton(user)}
            </li>
          ))}
        </ul>
      </div>

      {pendingFriends.length > 4 && (
        <div className="p-3 border-t border-[#4E92A2] text-center">
          <button
            onClick={(e: MouseEvent) => {
              e.preventDefault();
              e.stopPropagation();
              setShowAll(prev => !prev);
            }}
            className="text-sm text-teal-600 hover:underline"
          >
            {showAll ? 'See less' : 'See more notifications'}
          </button>
        </div>
      )}
    </div>
  );
};

interface NotificationButtonProps {
  modalManager: {
    activeModal: 'search' | 'notification' | null;
    openModal: (modal: 'search' | 'notification') => void;
    closeModal: () => void;
    isModalOpen: (modal: 'search' | 'notification') => boolean;
  };
}

export const NotificationButton: ComponentFunction<NotificationButtonProps> = ({ modalManager }) => {
  const containerRef = useRef<HTMLDivElement | null>(null);
  const [redpoint, setredpoint] = useState<Boolean>(false);
  ws.onmessage = (ev) => {
    setredpoint(ev.data == "start");
  }
  const showNotif = modalManager.isModalOpen('notification');

  const handleButtonClick = (e: MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();

    if (showNotif) {
      modalManager.closeModal();
    } else {
      modalManager.openModal('notification');
    }
  };

  // Handle click outside to close modal
  useEffect(() => {
    if (!showNotif) return;

    const handleClickOutside = (e: Event) => {
      const target = e.target as Element;

      if (containerRef.current && !containerRef.current.contains(target)) {
        modalManager.closeModal();
      }
    };


    const timeoutId = setTimeout(() => {
      document.addEventListener('click', handleClickOutside, true);
    }, 50);

    return () => {
      clearTimeout(timeoutId);
      document.removeEventListener('click', handleClickOutside, true);
    };
  }, [showNotif, modalManager]);

  return (
    <div className="relative" ref={containerRef}>
      <button
        type="button"
        onClick={(e: MouseEvent) => { handleButtonClick(e); setredpoint(false) }}
        className="flex items-center gap-2 md:px-3 py-1 overflow-hidden whitespace-nowrap transition-transform duration-200 hover:scale-95"
      >
        <img src="/images/home-assests/notif-icon.svg" alt="notif" className="w-6 h-6 md:w-10 md:h-10" />
        {
          redpoint && (
            <span className="absolute top-2 right-4 block w-3 h-3 bg-red-600 border-2 border-white rounded-full animate-ping"></span>
          )
        }
      </button>
      <NotificationPanel modalManager={modalManager} open={showNotif} />
    </div>
  );
};
