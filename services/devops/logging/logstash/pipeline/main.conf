
input {
  beats {
    port => 5044
  }
}

filter {
  # Add timestamp for processing
  mutate {
    add_field => { "[@metadata][received_at]" => "%{@timestamp}" }
  }

  # Extract service name from log file path
  if [log][file][path] {
    grok {
      match => { 
        "[log][file][path]" => [
          "/var/log/ft-transcendence/(?<extracted_service>[^/]+)/.*",
          "/var/log/nginx/ft-transcendence-(?<extracted_service>[^-]+)-.*",
          "/var/log/(?<extracted_service>nginx)/.*"
        ]
      }
      tag_on_failure => ["_grokparsefailure_service_extraction"]
    }
  }

  # Set service name priority: extracted_service > service field > log_service
  if [extracted_service] {
    mutate {
      add_field => { "service_name" => "%{extracted_service}" }
    }
  } else if [service] {
    mutate {
      add_field => { "service_name" => "%{service}" }
    }
  }

  # Parse JSON logs
  if [message] =~ /^\s*\{.*\}\s*$/ {
    json {
      source => "message"
      target => "parsed_json"
      skip_on_invalid_json => true
    }
    
    if [parsed_json] {
      # Extract basic fields from parsed JSON
      if [parsed_json][timestamp] {
        mutate { add_field => { "log_timestamp" => "%{[parsed_json][timestamp]}" } }
      }
      if [parsed_json][level] {
        mutate { add_field => { "log_level" => "%{[parsed_json][level]}" } }
      }
      if [parsed_json][message] {
        mutate { add_field => { "log_message" => "%{[parsed_json][message]}" } }
      }
      if [parsed_json][service] {
        mutate { add_field => { "log_service" => "%{[parsed_json][service]}" } }
      }
      if [parsed_json][request_id] {
        mutate { add_field => { "request_id" => "%{[parsed_json][request_id]}" } }
      }
      if [parsed_json][user_id] {
        mutate { add_field => { "user_id" => "%{[parsed_json][user_id]}" } }
      }
      if [parsed_json][username] {
        mutate { add_field => { "username" => "%{[parsed_json][username]}" } }
      }
      if [parsed_json][session_id] {
        mutate { add_field => { "session_id" => "%{[parsed_json][session_id]}" } }
      }
      if [parsed_json][action] {
        mutate { add_field => { "action" => "%{[parsed_json][action]}" } }
      }
      if [parsed_json][success] {
        mutate { add_field => { "success" => "%{[parsed_json][success]}" } }
      }
      
      # Handle request object
      if [parsed_json][request] {
        if [parsed_json][request][method] {
          mutate { add_field => { "request_method" => "%{[parsed_json][request][method]}" } }
        }
        if [parsed_json][request][url] {
          mutate { add_field => { "request_url" => "%{[parsed_json][request][url]}" } }
        }
        if [parsed_json][request][ip] {
          mutate { add_field => { "request_ip" => "%{[parsed_json][request][ip]}" } }
        }
        if [parsed_json][request][user_agent] {
          mutate { add_field => { "request_user_agent" => "%{[parsed_json][request][user_agent]}" } }
        }
      }
      
      # Handle response object
      if [parsed_json][response] {
        if [parsed_json][response][status] {
          mutate { add_field => { "response_status" => "%{[parsed_json][response][status]}" } }
        }
        if [parsed_json][response][time] {
          mutate { add_field => { "response_time" => "%{[parsed_json][response][time]}" } }
        }
        if [parsed_json][response][duration] {
          mutate { add_field => { "response_duration" => "%{[parsed_json][response][duration]}" } }
        }
      }
      
      # Handle error information
      if [parsed_json][error] {
        mutate { add_field => { "error_message" => "%{[parsed_json][error]}" } }
      }
      if [parsed_json][error_reason] {
        mutate { add_field => { "error_reason" => "%{[parsed_json][error_reason]}" } }
      }
      if [parsed_json][error_code] {
        mutate { add_field => { "error_code" => "%{[parsed_json][error_code]}" } }
      }
      
      # Handle game-specific fields
      if [parsed_json][game_id] {
        mutate { add_field => { "game_id" => "%{[parsed_json][game_id]}" } }
      }
      if [parsed_json][match_id] {
        mutate { add_field => { "match_id" => "%{[parsed_json][match_id]}" } }
      }
      if [parsed_json][tournament_id] {
        mutate { add_field => { "tournament_id" => "%{[parsed_json][tournament_id]}" } }
      }
      if [parsed_json][event_type] {
        mutate { add_field => { "event_type" => "%{[parsed_json][event_type]}" } }
      }
      
      # Handle chat-specific fields
      if [parsed_json][message_id] {
        mutate { add_field => { "message_id" => "%{[parsed_json][message_id]}" } }
      }
      if [parsed_json][channel_id] {
        mutate { add_field => { "channel_id" => "%{[parsed_json][channel_id]}" } }
      }
      if [parsed_json][to_username] {
        mutate { add_field => { "to_username" => "%{[parsed_json][to_username]}" } }
      }
      
      # Handle security-specific fields
      if [parsed_json][security_event] {
        mutate { add_field => { "security_event" => "%{[parsed_json][security_event]}" } }
      }
      if [parsed_json][threat_level] {
        mutate { add_field => { "threat_level" => "%{[parsed_json][threat_level]}" } }
      }
      if [parsed_json][source_ip] {
        mutate { add_field => { "source_ip" => "%{[parsed_json][source_ip]}" } }
      }
      
      # Update service name from JSON if not already set
      if [parsed_json][service] and ![service_name] {
        mutate { add_field => { "service_name" => "%{[parsed_json][service]}" } }
      }
      
      # Remove the original parsed_json object
      mutate {
        remove_field => [ "parsed_json" ]
      }
    }
  } else {
    # For non-JSON logs, try to extract common patterns
    
    # Nginx access log pattern
    if [logtype] == "api-gateway" {
      grok {
        match => { 
          "message" => "%{COMBINEDAPACHELOG}" 
        }
        tag_on_failure => ["_grokparsefailure_nginx"]
      }
      
      if [response] {
        mutate { add_field => { "response_status" => "%{response}" } }
      }
      if [bytes] {
        mutate { add_field => { "response_bytes" => "%{bytes}" } }
      }
      if [clientip] {
        mutate { add_field => { "request_ip" => "%{clientip}" } }
      }
      if [verb] {
        mutate { add_field => { "request_method" => "%{verb}" } }
      }
      if [request] {
        mutate { add_field => { "request_url" => "%{request}" } }
      }
    }
    
    # Generic log level extraction
    grok {
      match => { 
        "message" => "(?<log_level>DEBUG|INFO|WARN|ERROR|FATAL|TRACE)" 
      }
      tag_on_failure => ["_grokparsefailure_loglevel"]
    }
  }

  # Set proper timestamp
  if [log_timestamp] {
    date {
      match => [ "log_timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss,SSS", "yyyy-MM-dd HH:mm:ss.SSS" ]
      target => "@timestamp"
    }
  }

  # Normalize log level
  if [log_level] {
    mutate {
      uppercase => [ "log_level" ]
    }
  }

  # Convert numeric fields
  if [response_status] {
    mutate {
      convert => { "response_status" => "integer" }
    }
  }
  if [response_time] {
    mutate {
      convert => { "response_time" => "float" }
    }
  }
  if [response_duration] {
    mutate {
      convert => { "response_duration" => "float" }
    }
  }

  # Add environment and datacenter info
  if [environment] {
    mutate {
      add_field => { "env" => "%{environment}" }
    }
  }
  
  if [datacenter] {
    mutate {
      add_field => { "dc" => "%{datacenter}" }
    }
  }

  # Set final service name
  if ![service_name] and [log_service] {
    mutate {
      add_field => { "service_name" => "%{log_service}" }
    }
  }

  # Add service-specific tags
  if [service_name] {
    if [service_name] == "auth-service" {
      mutate { add_tag => [ "authentication", "security" ] }
    } else if [service_name] == "api-gateway" {
      mutate { add_tag => [ "gateway", "routing" ] }
    } else if [service_name] == "chat-service" {
      mutate { add_tag => [ "messaging", "realtime" ] }
    } else if [service_name] == "game-service" {
      mutate { add_tag => [ "gaming", "realtime" ] }
    } else if [service_name] == "user-service" {
      mutate { add_tag => [ "user-management" ] }
    } else if [service_name] =~ /security/ {
      mutate { add_tag => [ "security", "monitoring" ] }
    }
  }

  # Clean up unwanted fields
  mutate {
    remove_field => [ 
      "message", 
      "host", 
      "agent", 
      "ecs", 
      "extracted_service",
      "log_service",
      "clientip",
      "verb",
      "request",
      "httpversion",
      "response",
      "bytes",
      "referrer",
      "auth"
    ]
  }

  # Set index name based on logtype and service
  if [logtype] {
    if [logtype] == "security-events" {
      mutate {
        add_field => { "[@metadata][index_name]" => "ft-transcendence-security-%{+YYYY.MM.dd}" }
      }
    } else if [logtype] == "chat-messages" {
      mutate {
        add_field => { "[@metadata][index_name]" => "ft-transcendence-chat-%{+YYYY.MM.dd}" }
      }
    } else if [logtype] == "game-events" {
      mutate {
        add_field => { "[@metadata][index_name]" => "ft-transcendence-game-%{+YYYY.MM.dd}" }
      }
    } else if [logtype] == "api-gateway" {
      mutate {
        add_field => { "[@metadata][index_name]" => "ft-transcendence-gateway-%{+YYYY.MM.dd}" }
      }
    } else {
      mutate {
        add_field => { "[@metadata][index_name]" => "ft-transcendence-%{logtype}-%{+YYYY.MM.dd}" }
      }
    }
  } else if [service_name] {
    mutate {
      add_field => { "[@metadata][index_name]" => "ft-transcendence-%{service_name}-%{+YYYY.MM.dd}" }
    }
  } else {
    mutate {
      add_field => { "[@metadata][index_name]" => "ft-transcendence-logs-%{+YYYY.MM.dd}" }
    }
  }
}

output {
    elasticsearch {
        hosts => ["https://elasticsearch:9200"]
        user => "${ELASTIC_USERNAME:-elastic}"
        password => "${ELASTIC_PASSWORD:-changeme}"
        ssl_certificate_verification => false
        index => "%{[@metadata][index_name]}"
    }
}